// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using computrized_maintenance_Data_Access.Data;

#nullable disable

namespace computrized_maintenance_Data_Access.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250415205339_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.Asset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AssetCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("AssetLocationID")
                        .HasColumnType("int");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssetStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetTagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAssetDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateByUser")
                        .HasColumnType("int");

                    b.Property<string>("Criticality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ManufactuerModelNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ManufactuerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MeterReading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchaseCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdateAssetDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("WarrantyExpiryDate")
                        .HasColumnType("date");

                    b.HasKey("ID")
                        .HasAnnotation("SqlServer = Identity", "(1,1)");

                    b.HasIndex("AssetCategoryID")
                        .IsUnique();

                    b.HasIndex("AssetLocationID")
                        .IsUnique();

                    b.ToTable("Assets", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AssetCategoryID = 1,
                            AssetLocationID = 2,
                            AssetName = "HVAC Unit - Floor 3",
                            AssetStatus = "Active",
                            AssetTagNumber = "HVAC-3F-01",
                            CreateAssetDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateByUser = 1,
                            Criticality = "High",
                            InstallationDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactuerModelNumber = "24VNA9",
                            ManufactuerName = "Carrier",
                            MeterReading = "Hours",
                            PurchaseCost = 12500.00m,
                            PurchaseDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyExpiryDate = new DateTime(2027, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            AssetCategoryID = 2,
                            AssetLocationID = 1,
                            AssetName = "Forklift #5",
                            AssetStatus = "UnderMaintenance",
                            AssetTagNumber = "FL-005",
                            CreateAssetDate = new DateTime(2021, 8, 12, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CreateByUser = 1,
                            Criticality = "Medium",
                            ManufactuerModelNumber = "8FGCU25",
                            ManufactuerName = "Toyota",
                            MeterReading = "Hours",
                            PurchaseCost = 32000.00m,
                            PurchaseDate = new DateTime(2021, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateAssetDate = new DateTime(2023, 11, 15, 20, 12, 0, 0, DateTimeKind.Unspecified),
                            WarrantyExpiryDate = new DateTime(2024, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            AssetCategoryID = 3,
                            AssetLocationID = 3,
                            AssetName = "Server Rack UPS",
                            AssetStatus = "Active",
                            AssetTagNumber = "IT-UPS-02",
                            CreateAssetDate = new DateTime(2023, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateByUser = 1,
                            Criticality = "High",
                            InstallationDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufactuerModelNumber = "SMX1500RM2U",
                            ManufactuerName = "APC",
                            MeterReading = "PowerCycles",
                            PurchaseCost = 2200.00m,
                            PurchaseDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyExpiryDate = new DateTime(2026, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.AssetImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AssetID")
                        .HasColumnType("int");

                    b.Property<short>("ImageHeight")
                        .HasColumnType("smallint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ImageWidth")
                        .HasColumnType("smallint");

                    b.HasKey("ID")
                        .HasAnnotation("SqlServer: identity", "(1,1)");

                    b.HasIndex("AssetID");

                    b.ToTable("AssetImages", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AssetID = 1,
                            ImageHeight = (short)150,
                            ImagePath = "C:\\User\\Samsung\\Images\\imageOne1.png",
                            ImageWidth = (short)150
                        },
                        new
                        {
                            ID = 2,
                            AssetID = 1,
                            ImageHeight = (short)150,
                            ImagePath = "C:\\User\\Samsung\\Images\\imageOne2.png",
                            ImageWidth = (short)150
                        },
                        new
                        {
                            ID = 3,
                            AssetID = 2,
                            ImageHeight = (short)150,
                            ImagePath = "C:\\User\\Samsung\\Images\\imageTwo1.png",
                            ImageWidth = (short)150
                        },
                        new
                        {
                            ID = 4,
                            AssetID = 2,
                            ImageHeight = (short)150,
                            ImagePath = "C:\\User\\Samsung\\Images\\imageTwo2.png",
                            ImageWidth = (short)150
                        },
                        new
                        {
                            ID = 5,
                            AssetID = 3,
                            ImageHeight = (short)150,
                            ImagePath = "C:\\User\\Samsung\\Images\\imageThree1.png",
                            ImageWidth = (short)150
                        },
                        new
                        {
                            ID = 6,
                            AssetID = 3,
                            ImageHeight = (short)150,
                            ImagePath = "C:\\User\\Samsung\\Images\\imageThree2.png",
                            ImageWidth = (short)150
                        });
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryName");

                    b.HasKey("ID");

                    b.ToTable("AssetCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Category_Name = "Production Equipment"
                        },
                        new
                        {
                            ID = 2,
                            Category_Name = "Facility Infrastructure"
                        },
                        new
                        {
                            ID = 3,
                            Category_Name = "Transportation"
                        },
                        new
                        {
                            ID = 4,
                            Category_Name = "IT Infrastructure"
                        },
                        new
                        {
                            ID = 5,
                            Category_Name = "Safety Equipment"
                        },
                        new
                        {
                            ID = 6,
                            Category_Name = "Tools"
                        },
                        new
                        {
                            ID = 7,
                            Category_Name = "Mechanical"
                        },
                        new
                        {
                            ID = 8,
                            Category_Name = "Electrical"
                        },
                        new
                        {
                            ID = 9,
                            Category_Name = "Electronic"
                        },
                        new
                        {
                            ID = 10,
                            Category_Name = "Hydraulic"
                        },
                        new
                        {
                            ID = 11,
                            Category_Name = "Pneumatic"
                        },
                        new
                        {
                            ID = 12,
                            Category_Name = "Process Equipment"
                        },
                        new
                        {
                            ID = 13,
                            Category_Name = "Support Equipment"
                        },
                        new
                        {
                            ID = 14,
                            Category_Name = "Standby Equipment"
                        },
                        new
                        {
                            ID = 15,
                            Category_Name = "Fire Protection"
                        },
                        new
                        {
                            ID = 16,
                            Category_Name = "Office Equipment"
                        },
                        new
                        {
                            ID = 17,
                            Category_Name = "Medical Equipment"
                        },
                        new
                        {
                            ID = 18,
                            Category_Name = "Laboratory Equipment"
                        },
                        new
                        {
                            ID = 19,
                            Category_Name = "Construction Equipment"
                        });
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID")
                        .HasAnnotation("SqlServer: identity", "(1,1)");

                    b.ToTable("Locations", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            LocationName = "Building A"
                        },
                        new
                        {
                            ID = 2,
                            LocationName = "Building B"
                        },
                        new
                        {
                            ID = 3,
                            LocationName = "facility - 109"
                        });
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.SubCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Sub_Category_Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("ID")
                        .HasAnnotation("SqlServer = Identity", "(1,1)");

                    b.HasIndex("CategoryID");

                    b.ToTable("SubCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            Sub_Category_Name = "CNC Machines"
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 1,
                            Sub_Category_Name = "Assembly Lines"
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 2,
                            Sub_Category_Name = "HVAC Systems"
                        },
                        new
                        {
                            ID = 4,
                            CategoryID = 2,
                            Sub_Category_Name = "Electrical Systems"
                        });
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.Asset", b =>
                {
                    b.HasOne("computrized_maintenance_Data_Access.Entites.AssetsManagment.Category", "Category")
                        .WithOne("Asset")
                        .HasForeignKey("computrized_maintenance_Data_Access.Entites.AssetsManagment.Asset", "AssetCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("computrized_maintenance_Data_Access.Entites.AssetsManagment.Location", "Location")
                        .WithOne("Asset")
                        .HasForeignKey("computrized_maintenance_Data_Access.Entites.AssetsManagment.Asset", "AssetLocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.AssetImage", b =>
                {
                    b.HasOne("computrized_maintenance_Data_Access.Entites.AssetsManagment.Asset", "Asset")
                        .WithMany("AssetImages")
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.SubCategory", b =>
                {
                    b.HasOne("computrized_maintenance_Data_Access.Entites.AssetsManagment.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.Asset", b =>
                {
                    b.Navigation("AssetImages");
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.Category", b =>
                {
                    b.Navigation("Asset")
                        .IsRequired();

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("computrized_maintenance_Data_Access.Entites.AssetsManagment.Location", b =>
                {
                    b.Navigation("Asset")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
